/**
 * @fileoverview gRPC-Web generated client stub for task
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.15.6
// source: protos/task.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.task = require('./task_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.task.TaskServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.task.TaskServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.TaskRequest,
 *   !proto.task.TaskResponse>}
 */
const methodDescriptor_TaskService_GetTask = new grpc.web.MethodDescriptor(
  '/task.TaskService/GetTask',
  grpc.web.MethodType.UNARY,
  proto.task.TaskRequest,
  proto.task.TaskResponse,
  /**
   * @param {!proto.task.TaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.TaskResponse.deserializeBinary
);


/**
 * @param {!proto.task.TaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.task.TaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.task.TaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.task.TaskServiceClient.prototype.getTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/task.TaskService/GetTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTask,
      callback);
};


/**
 * @param {!proto.task.TaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.task.TaskResponse>}
 *     Promise that resolves to the response
 */
proto.task.TaskServicePromiseClient.prototype.getTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/task.TaskService/GetTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.AddTaskRequest,
 *   !proto.task.AddTaskResponse>}
 */
const methodDescriptor_TaskService_AddTask = new grpc.web.MethodDescriptor(
  '/task.TaskService/AddTask',
  grpc.web.MethodType.UNARY,
  proto.task.AddTaskRequest,
  proto.task.AddTaskResponse,
  /**
   * @param {!proto.task.AddTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.AddTaskResponse.deserializeBinary
);


/**
 * @param {!proto.task.AddTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.task.AddTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.task.AddTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.task.TaskServiceClient.prototype.addTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/task.TaskService/AddTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_AddTask,
      callback);
};


/**
 * @param {!proto.task.AddTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.task.AddTaskResponse>}
 *     Promise that resolves to the response
 */
proto.task.TaskServicePromiseClient.prototype.addTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/task.TaskService/AddTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_AddTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.DeleteTaskRequest,
 *   !proto.task.DeleteTaskResponse>}
 */
const methodDescriptor_TaskService_DeleteTask = new grpc.web.MethodDescriptor(
  '/task.TaskService/DeleteTask',
  grpc.web.MethodType.UNARY,
  proto.task.DeleteTaskRequest,
  proto.task.DeleteTaskResponse,
  /**
   * @param {!proto.task.DeleteTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.DeleteTaskResponse.deserializeBinary
);


/**
 * @param {!proto.task.DeleteTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.task.DeleteTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.task.DeleteTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.task.TaskServiceClient.prototype.deleteTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/task.TaskService/DeleteTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_DeleteTask,
      callback);
};


/**
 * @param {!proto.task.DeleteTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.task.DeleteTaskResponse>}
 *     Promise that resolves to the response
 */
proto.task.TaskServicePromiseClient.prototype.deleteTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/task.TaskService/DeleteTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_DeleteTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.UpdateTaskRequest,
 *   !proto.task.UpdateTaskResponse>}
 */
const methodDescriptor_TaskService_UpdateTask = new grpc.web.MethodDescriptor(
  '/task.TaskService/UpdateTask',
  grpc.web.MethodType.UNARY,
  proto.task.UpdateTaskRequest,
  proto.task.UpdateTaskResponse,
  /**
   * @param {!proto.task.UpdateTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.UpdateTaskResponse.deserializeBinary
);


/**
 * @param {!proto.task.UpdateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.task.UpdateTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.task.UpdateTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.task.TaskServiceClient.prototype.updateTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/task.TaskService/UpdateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateTask,
      callback);
};


/**
 * @param {!proto.task.UpdateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.task.UpdateTaskResponse>}
 *     Promise that resolves to the response
 */
proto.task.TaskServicePromiseClient.prototype.updateTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/task.TaskService/UpdateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.EmptyRequest,
 *   !proto.task.EmptyResponse>}
 */
const methodDescriptor_TaskService_DeleteUnUsedConnections = new grpc.web.MethodDescriptor(
  '/task.TaskService/DeleteUnUsedConnections',
  grpc.web.MethodType.UNARY,
  proto.task.EmptyRequest,
  proto.task.EmptyResponse,
  /**
   * @param {!proto.task.EmptyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.EmptyResponse.deserializeBinary
);


/**
 * @param {!proto.task.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.task.EmptyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.task.EmptyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.task.TaskServiceClient.prototype.deleteUnUsedConnections =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/task.TaskService/DeleteUnUsedConnections',
      request,
      metadata || {},
      methodDescriptor_TaskService_DeleteUnUsedConnections,
      callback);
};


/**
 * @param {!proto.task.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.task.EmptyResponse>}
 *     Promise that resolves to the response
 */
proto.task.TaskServicePromiseClient.prototype.deleteUnUsedConnections =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/task.TaskService/DeleteUnUsedConnections',
      request,
      metadata || {},
      methodDescriptor_TaskService_DeleteUnUsedConnections);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.TasksRequest,
 *   !proto.task.TasksResponse>}
 */
const methodDescriptor_TaskService_GetAllTasks = new grpc.web.MethodDescriptor(
  '/task.TaskService/GetAllTasks',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.task.TasksRequest,
  proto.task.TasksResponse,
  /**
   * @param {!proto.task.TasksRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.TasksResponse.deserializeBinary
);


/**
 * @param {!proto.task.TasksRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.task.TasksResponse>}
 *     The XHR Node Readable Stream
 */
proto.task.TaskServiceClient.prototype.getAllTasks =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/task.TaskService/GetAllTasks',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetAllTasks);
};


/**
 * @param {!proto.task.TasksRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.task.TasksResponse>}
 *     The XHR Node Readable Stream
 */
proto.task.TaskServicePromiseClient.prototype.getAllTasks =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/task.TaskService/GetAllTasks',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetAllTasks);
};


module.exports = proto.task;

